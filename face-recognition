import cv2
import face_recognition
import pygame

# Load the known face image (replace 'known_face.jpg' with your known face image)
known_image = face_recognition.load_image_file("known_face.jpg")
known_face_encoding = face_recognition.face_encodings(known_image)[0]

# Initialize pygame for audio playback
pygame.mixer.init()
pygame.mixer.music.load('matched_music.mp3')  # Replace with the path to your matched music file

# Open the video capture (0 represents the default camera, you can change it to a video file path)
video_capture = cv2.VideoCapture(0)

# Flag to track whether music has been played for the current face match
music_played = False

while True:
    # Capture a single frame from the video stream
    ret, frame = video_capture.read()

    if not ret:
        break

    # Find all face locations in the frame
    face_locations = face_recognition.face_locations(frame)
    face_encodings = face_recognition.face_encodings(frame, face_locations)

    # Loop through each face found in the frame
    for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
        # Compare the face encoding of the known face with the face in the frame
        match = face_recognition.compare_faces([known_face_encoding], face_encoding, tolerance=0.6)

        # Play music only once if it's a match and music hasn't been played yet
        if match[0] and not music_played:
            pygame.mixer.music.play()
            music_played = True

        # Draw a rectangle around the face (green for a match, red for no match)
        color = (0, 255, 0) if match[0] else (0, 0, 255)
        cv2.rectangle(frame, (left, top), (right, bottom), color, 2)

    # Display the frame
    cv2.imshow("Face Recognition", frame)

    # Exit the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close all OpenCV windows
video_capture.release()
cv2.destroyAllWindows()
